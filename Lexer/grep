TOKEN_SLASH : /
TOKEN_STAR : *
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_SYMBOL : AUTHOR
TOKEN_LITERAL : :
TOKEN_SYMBOL : Kiranam
TOKEN_SYMBOL : Dewangan
TOKEN_SYMBOL : DATE
TOKEN_LITERAL : :
TOKEN_SYMBOL : March
TOKEN_NUMBER : 18
TOKEN_LITERAL : ,
TOKEN_NUMBER : 2025
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_EXTENDED : ==
TOKEN_STAR : *
TOKEN_SLASH : /
TOKEN_PREPROCESSOR : #include "lexer.h"

TOKEN_PREPROCESSOR : #include <string.h>

TOKEN_PREPROCESSOR : #include <stdio.h>

TOKEN_PREPROCESSOR : #include <ctype.h>

TOKEN_PREPROCESSOR : #include <stdlib.h>

TOKEN_PREPROCESSOR : #include <stdbool.h>

TOKEN_PREPROCESSOR : #include "../file_handler/file_handler.h"

TOKEN_COMMENT : //This does not remove the whitespace, it merely ignores them
TOKEN_SYMBOL : void
TOKEN_SYMBOL : skip_whitespace
TOKEN_LITERAL : (
TOKEN_SYMBOL : Lexer
TOKEN_STAR : *
TOKEN_SYMBOL : l
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : while
TOKEN_LITERAL : (
TOKEN_SYMBOL : isspace
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_EXTENDED : &&
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_LITERAL : }
TOKEN_SYMBOL : Lexer
TOKEN_SYMBOL : init_lexer
TOKEN_LITERAL : (
TOKEN_SYMBOL : const
TOKEN_SYMBOL : char
TOKEN_STAR : *
TOKEN_SYMBOL : str
TOKEN_LITERAL : ,
TOKEN_SYMBOL : size_t
TOKEN_SYMBOL : str_len
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : Lexer
TOKEN_SYMBOL : l
TOKEN_EQUALS : =
TOKEN_LITERAL : {
TOKEN_NUMBER : 0
TOKEN_LITERAL : }
TOKEN_LITERAL : ;
TOKEN_SYMBOL : l
TOKEN_LITERAL : .
TOKEN_SYMBOL : content
TOKEN_EQUALS : =
TOKEN_SYMBOL : str
TOKEN_LITERAL : ;
TOKEN_SYMBOL : l
TOKEN_LITERAL : .
TOKEN_SYMBOL : content_len
TOKEN_EQUALS : =
TOKEN_SYMBOL : str_len
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : l
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_COMMENT : // Returns 0 if character is a number or a special symbol
TOKEN_SYMBOL : bool
TOKEN_SYMBOL : check_symbol_first_valid
TOKEN_LITERAL : (
TOKEN_SYMBOL : char
TOKEN_SYMBOL : c
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : return
TOKEN_SYMBOL : isalpha
TOKEN_LITERAL : (
TOKEN_SYMBOL : c
TOKEN_LITERAL : )
TOKEN_UNKNOWN : |
TOKEN_UNKNOWN : |
TOKEN_SYMBOL : c
TOKEN_EXTENDED : ==
TOKEN_LITERAL : '
TOKEN_SYMBOL : _
TOKEN_LITERAL : '
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_COMMENT : // Return a positive value if the character is a alphanumeric character or '_'
TOKEN_SYMBOL : bool
TOKEN_SYMBOL : check_symbol
TOKEN_LITERAL : (
TOKEN_SYMBOL : char
TOKEN_SYMBOL : a
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : return
TOKEN_SYMBOL : isalnum
TOKEN_LITERAL : (
TOKEN_SYMBOL : a
TOKEN_LITERAL : )
TOKEN_UNKNOWN : |
TOKEN_UNKNOWN : |
TOKEN_SYMBOL : a
TOKEN_EXTENDED : ==
TOKEN_LITERAL : '
TOKEN_SYMBOL : _
TOKEN_LITERAL : '
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : char
TOKEN_SYMBOL : LITERAL_SYMBOLS
TOKEN_LITERAL : [
TOKEN_LITERAL : ]
TOKEN_EQUALS : =
TOKEN_LITERAL : {
TOKEN_LITERAL : '
TOKEN_LITERAL : (
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : )
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : {
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : }
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : [
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : ]
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : ;
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : :
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : .
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_UNKNOWN : \
TOKEN_LITERAL : '
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LITERAL : ;
TOKEN_LITERAL : '
TOKEN_LITERAL : }
TOKEN_LITERAL : ;
TOKEN_PREPROCESSOR : #define LITERAL_SYMBOLS_SIZE sizeof(LITERAL_SYMBOLS)/sizeof(LITERAL_SYMBOLS[0])

TOKEN_SYMBOL : char
TOKEN_SYMBOL : OPERATOR_LIST
TOKEN_LITERAL : [
TOKEN_LITERAL : ]
TOKEN_EQUALS : =
TOKEN_LITERAL : {
TOKEN_LITERAL : '
TOKEN_EQUALS : =
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_PLUS : +
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_MINUS : -
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_STAR : *
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_LESS_THAN : <
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_GREATER_THAN : >
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_NOT : !
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_MODULUS : %
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_AMPERSAND : &
TOKEN_LITERAL : '
TOKEN_LITERAL : ,
TOKEN_LITERAL : '
TOKEN_SLASH : /
TOKEN_LITERAL : '
TOKEN_LITERAL : }
TOKEN_LITERAL : ;
TOKEN_PREPROCESSOR : #define OPERATOR_LIST_SIZE sizeof(OPERATOR_LIST)/sizeof(OPERATOR_LIST[0])

TOKEN_SYMBOL : unsigned
TOKEN_SYMBOL : int
TOKEN_SYMBOL : OPERATOR_TOKENS
TOKEN_LITERAL : [
TOKEN_LITERAL : ]
TOKEN_EQUALS : =
TOKEN_LITERAL : {
TOKEN_SYMBOL : TOKEN_EQUALS
TOKEN_LITERAL : ,
TOKEN_COMMENT : // =
TOKEN_SYMBOL : TOKEN_PLUS
TOKEN_LITERAL : ,
TOKEN_COMMENT : // +
TOKEN_SYMBOL : TOKEN_MINUS
TOKEN_LITERAL : ,
TOKEN_COMMENT : // -
TOKEN_SYMBOL : TOKEN_STAR
TOKEN_LITERAL : ,
TOKEN_COMMENT : // *
TOKEN_SYMBOL : TOKEN_LESS_THAN
TOKEN_LITERAL : ,
TOKEN_COMMENT : // <
TOKEN_SYMBOL : TOKEN_GREATER_THAN
TOKEN_LITERAL : ,
TOKEN_COMMENT : // >
TOKEN_SYMBOL : TOKEN_NOT
TOKEN_LITERAL : ,
TOKEN_COMMENT : // !
TOKEN_SYMBOL : TOKEN_MODULUS
TOKEN_LITERAL : ,
TOKEN_COMMENT : // %
TOKEN_SYMBOL : TOKEN_AMPERSAND
TOKEN_LITERAL : ,
TOKEN_COMMENT : // &
TOKEN_SYMBOL : TOKEN_SLASH
TOKEN_SLASH : /
TOKEN_COMMENT : / /
TOKEN_LITERAL : }
TOKEN_LITERAL : ;
TOKEN_SYMBOL : const
TOKEN_SYMBOL : char
TOKEN_STAR : *
TOKEN_SYMBOL : KEYWORD_LIST
TOKEN_LITERAL : [
TOKEN_LITERAL : ]
TOKEN_EQUALS : =
TOKEN_LITERAL : {
TOKEN_STRING : "if"
TOKEN_LITERAL : ,
TOKEN_STRING : "else"
TOKEN_LITERAL : ,
TOKEN_STRING : "loop"
TOKEN_LITERAL : ,
TOKEN_STRING : "loop_condition"
TOKEN_LITERAL : ,
TOKEN_STRING : "case"
TOKEN_LITERAL : ,
TOKEN_STRING : "default"
TOKEN_LITERAL : ,
TOKEN_STRING : "typedef"
TOKEN_LITERAL : ,
TOKEN_STRING : "struct"
TOKEN_LITERAL : ,
TOKEN_STRING : "true"
TOKEN_LITERAL : ,
TOKEN_STRING : "false"
TOKEN_LITERAL : ,
TOKEN_STRING : "mem8"
TOKEN_LITERAL : ,
TOKEN_STRING : "mem16"
TOKEN_LITERAL : ,
TOKEN_STRING : "mem32"
TOKEN_LITERAL : ,
TOKEN_STRING : "mem64"
TOKEN_LITERAL : ,
TOKEN_STRING : "mem128"
TOKEN_LITERAL : ,
TOKEN_LITERAL : }
TOKEN_LITERAL : ;
TOKEN_PREPROCESSOR : #define STRING_LEN(a) strlen(a)

TOKEN_PREPROCESSOR : #define KEYWORD_COUNT sizeof(KEYWORD_LIST)/sizeof(KEYWORD_LIST[0])

TOKEN_SYMBOL : void
TOKEN_SYMBOL : check_keyword
TOKEN_LITERAL : (
TOKEN_SYMBOL : Token
TOKEN_STAR : *
TOKEN_SYMBOL : t
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : for
TOKEN_LITERAL : (
TOKEN_SYMBOL : int
TOKEN_SYMBOL : i
TOKEN_EQUALS : =
TOKEN_NUMBER : 0
TOKEN_LITERAL : ;
TOKEN_SYMBOL : i
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : KEYWORD_COUNT
TOKEN_LITERAL : ;
TOKEN_SYMBOL : i
TOKEN_EXTENDED : ++
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_NOT : !
TOKEN_SYMBOL : strncmp
TOKEN_LITERAL : (
TOKEN_SYMBOL : t
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : str
TOKEN_LITERAL : ,
TOKEN_SYMBOL : KEYWORD_LIST
TOKEN_LITERAL : [
TOKEN_SYMBOL : i
TOKEN_LITERAL : ]
TOKEN_LITERAL : ,
TOKEN_SYMBOL : strlen
TOKEN_LITERAL : (
TOKEN_SYMBOL : KEYWORD_LIST
TOKEN_LITERAL : [
TOKEN_SYMBOL : i
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_LITERAL : )
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : t
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_KEYWORD
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_LITERAL : }
TOKEN_LITERAL : }
TOKEN_COMMENT : //CHECKS FOR SYMBOLS SUCH AS [//, ++ , --, &&, ||]
TOKEN_SYMBOL : void
TOKEN_SYMBOL : check_repeated_symbols
TOKEN_LITERAL : (
TOKEN_SYMBOL : Lexer
TOKEN_STAR : *
TOKEN_SYMBOL : l
TOKEN_LITERAL : ,
TOKEN_SYMBOL : Token
TOKEN_STAR : *
TOKEN_SYMBOL : token
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : Token
TOKEN_SYMBOL : t
TOKEN_EQUALS : =
TOKEN_SYMBOL : peek_next
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : token
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : type
TOKEN_EXTENDED : ==
TOKEN_SYMBOL : TOKEN_SLASH
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : t
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_EXTENDED : ==
TOKEN_SYMBOL : TOKEN_SLASH
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : token
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_COMMENT
TOKEN_LITERAL : ;
TOKEN_SYMBOL : while
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_EXTENDED : &&
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_NOT : !
TOKEN_EQUALS : =
TOKEN_LITERAL : '
TOKEN_UNKNOWN : \
TOKEN_SYMBOL : n
TOKEN_LITERAL : '
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_EXTENDED : ++
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : token
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : size
TOKEN_EQUALS : =
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_MINUS : -
TOKEN_SYMBOL : token
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : str
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : return
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : token
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : type
TOKEN_EXTENDED : ==
TOKEN_SYMBOL : t
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : token
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_EXTENDED
TOKEN_LITERAL : ;
TOKEN_SYMBOL : token
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : size
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_LITERAL : }
TOKEN_SYMBOL : Token
TOKEN_SYMBOL : lexer_next
TOKEN_LITERAL : (
TOKEN_SYMBOL : Lexer
TOKEN_STAR : *
TOKEN_SYMBOL : l
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : skip_whitespace
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_SYMBOL : Token
TOKEN_SYMBOL : token
TOKEN_EQUALS : =
TOKEN_LITERAL : {
TOKEN_LITERAL : .
TOKEN_SYMBOL : str
TOKEN_EQUALS : =
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_LITERAL : ,
TOKEN_LITERAL : }
TOKEN_LITERAL : ;
TOKEN_COMMENT : //END OF SOURCE FILE CHECK
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_GREATER_THAN : >
TOKEN_EQUALS : =
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_LITERAL : ;
TOKEN_COMMENT : //CHECKING FOR LITERALS
TOKEN_SYMBOL : for
TOKEN_LITERAL : (
TOKEN_SYMBOL : int
TOKEN_SYMBOL : i
TOKEN_EQUALS : =
TOKEN_NUMBER : 0
TOKEN_LITERAL : ;
TOKEN_SYMBOL : i
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : LITERAL_SYMBOLS_SIZE
TOKEN_LITERAL : ;
TOKEN_SYMBOL : i
TOKEN_EXTENDED : ++
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_EXTENDED : ==
TOKEN_SYMBOL : LITERAL_SYMBOLS
TOKEN_LITERAL : [
TOKEN_SYMBOL : i
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_LITERAL
TOKEN_LITERAL : ;
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_EXTENDED : ++
TOKEN_LITERAL : ;
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_EXTENDED : ++
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_LITERAL : }
TOKEN_COMMENT : //CHECKING FOR OPERATORS
TOKEN_SYMBOL : for
TOKEN_LITERAL : (
TOKEN_SYMBOL : int
TOKEN_SYMBOL : i
TOKEN_EQUALS : =
TOKEN_NUMBER : 0
TOKEN_LITERAL : ;
TOKEN_SYMBOL : i
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : OPERATOR_LIST_SIZE
TOKEN_LITERAL : ;
TOKEN_SYMBOL : i
TOKEN_EXTENDED : ++
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_EXTENDED : ==
TOKEN_SYMBOL : OPERATOR_LIST
TOKEN_LITERAL : [
TOKEN_SYMBOL : i
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_EXTENDED : ++
TOKEN_LITERAL : ;
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : OPERATOR_TOKENS
TOKEN_LITERAL : [
TOKEN_SYMBOL : i
TOKEN_LITERAL : ]
TOKEN_LITERAL : ;
TOKEN_SYMBOL : check_repeated_symbols
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_LITERAL : ,
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : token
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_LITERAL : }
TOKEN_COMMENT : //NUMBERICAL CHARACTER CHECKER
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : isdigit
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_NUMBER
TOKEN_LITERAL : ;
TOKEN_SYMBOL : while
TOKEN_LITERAL : (
TOKEN_SYMBOL : isdigit
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_EXTENDED : &&
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_EXTENDED : ++
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_EQUALS : =
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_MINUS : -
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : str
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : switch
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_COMMENT : //PREPROCESSOR TOKENIZER
TOKEN_KEYWORD : case
TOKEN_LITERAL : '
TOKEN_PREPROCESSOR : #':{

TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_PREPROCESSOR
TOKEN_LITERAL : ;
TOKEN_SYMBOL : while
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_EXTENDED : &&
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_NOT : !
TOKEN_EQUALS : =
TOKEN_LITERAL : '
TOKEN_UNKNOWN : \
TOKEN_SYMBOL : n
TOKEN_LITERAL : '
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_EQUALS : =
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_MINUS : -
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : str
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : break
TOKEN_LITERAL : ;
TOKEN_COMMENT : //PREPROCESSOR TOKENIZER
TOKEN_KEYWORD : case
TOKEN_LITERAL : '
TOKEN_PREPROCESSOR : @':{

TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_PREPROCESSOR
TOKEN_LITERAL : ;
TOKEN_SYMBOL : while
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_EXTENDED : &&
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_NOT : !
TOKEN_EQUALS : =
TOKEN_LITERAL : '
TOKEN_UNKNOWN : \
TOKEN_SYMBOL : n
TOKEN_LITERAL : '
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_EQUALS : =
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_MINUS : -
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : str
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : break
TOKEN_LITERAL : ;
TOKEN_COMMENT : //STRING TOKENIZER
TOKEN_KEYWORD : case
TOKEN_LITERAL : '
TOKEN_STRING : "':{
                                token.type = TOKEN_STRING;
                                l->pointer++;
                                while(l->pointer < l->content_len && l->content[l->pointer] != '"
TOKEN_LITERAL : '
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_EXTENDED : ++
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_EQUALS : =
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_MINUS : -
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : str
TOKEN_LITERAL : ;
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_EXTENDED : ++
TOKEN_LITERAL : ;
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_EXTENDED : ++
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_KEYWORD : default
TOKEN_LITERAL : :
TOKEN_COMMENT : //SYMBOL CHECKER
TOKEN_COMMENT : //printf("%d\n", check_symbol_first_valid(l->content[l->pointer]));
TOKEN_KEYWORD : if
TOKEN_LITERAL : (
TOKEN_SYMBOL : check_symbol_first_valid
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_SYMBOL
TOKEN_LITERAL : ;
TOKEN_SYMBOL : while
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LESS_THAN : <
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content_len
TOKEN_EXTENDED : &&
TOKEN_SYMBOL : check_symbol
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_LITERAL : )
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_EQUALS : =
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : content
TOKEN_LITERAL : [
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ]
TOKEN_MINUS : -
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : str
TOKEN_LITERAL : ;
TOKEN_SYMBOL : check_keyword
TOKEN_LITERAL : (
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : token
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : break
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_UNKNOWN
TOKEN_LITERAL : ;
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_SYMBOL : token
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_PLUS : +
TOKEN_EQUALS : =
TOKEN_NUMBER : 1
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : token
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_COMMENT : //THIS PROCESS FETCHES NEXT TOKEN WITHOUT INCREMENTING THE CURRENT TOKEN POSITION
TOKEN_SYMBOL : Token
TOKEN_SYMBOL : peek_next
TOKEN_LITERAL : (
TOKEN_SYMBOL : Lexer
TOKEN_STAR : *
TOKEN_SYMBOL : l
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : int
TOKEN_SYMBOL : temp
TOKEN_EQUALS : =
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_LITERAL : ;
TOKEN_SYMBOL : Token
TOKEN_SYMBOL : t
TOKEN_EQUALS : =
TOKEN_SYMBOL : lexer_next
TOKEN_LITERAL : (
TOKEN_SYMBOL : l
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_SYMBOL : l
TOKEN_MINUS : -
TOKEN_GREATER_THAN : >
TOKEN_SYMBOL : pointer
TOKEN_EQUALS : =
TOKEN_SYMBOL : temp
TOKEN_LITERAL : ;
TOKEN_SYMBOL : return
TOKEN_SYMBOL : t
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_COMMENT : //RETURN A STRING BASED ON GIVEN TOKEN
TOKEN_SYMBOL : const
TOKEN_SYMBOL : char
TOKEN_STAR : *
TOKEN_SYMBOL : token_as_str
TOKEN_LITERAL : (
TOKEN_SYMBOL : int
TOKEN_SYMBOL : token
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : return
TOKEN_SYMBOL : TOKEN_LOOKUP
TOKEN_LITERAL : [
TOKEN_SYMBOL : token
TOKEN_LITERAL : ]
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : void
TOKEN_SYMBOL : print_token
TOKEN_LITERAL : (
TOKEN_SYMBOL : Token
TOKEN_SYMBOL : t
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : printf
TOKEN_LITERAL : (
TOKEN_STRING : "%s : %.*s\n"
TOKEN_LITERAL : ,
TOKEN_SYMBOL : token_as_str
TOKEN_LITERAL : (
TOKEN_SYMBOL : t
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_LITERAL : )
TOKEN_LITERAL : ,
TOKEN_LITERAL : (
TOKEN_SYMBOL : int
TOKEN_LITERAL : )
TOKEN_SYMBOL : t
TOKEN_LITERAL : .
TOKEN_SYMBOL : size
TOKEN_LITERAL : ,
TOKEN_SYMBOL : t
TOKEN_LITERAL : .
TOKEN_SYMBOL : str
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_SYMBOL : int
TOKEN_SYMBOL : main
TOKEN_LITERAL : (
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : const
TOKEN_SYMBOL : char
TOKEN_STAR : *
TOKEN_SYMBOL : src
TOKEN_EQUALS : =
TOKEN_SYMBOL : load_file_into_memory
TOKEN_LITERAL : (
TOKEN_STRING : "lexer.c"
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_SYMBOL : Lexer
TOKEN_SYMBOL : l
TOKEN_EQUALS : =
TOKEN_SYMBOL : init_lexer
TOKEN_LITERAL : (
TOKEN_SYMBOL : src
TOKEN_LITERAL : ,
TOKEN_SYMBOL : strlen
TOKEN_LITERAL : (
TOKEN_SYMBOL : src
TOKEN_LITERAL : )
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_SYMBOL : Token
TOKEN_SYMBOL : t
TOKEN_EQUALS : =
TOKEN_SYMBOL : lexer_next
TOKEN_LITERAL : (
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_SYMBOL : while
TOKEN_LITERAL : (
TOKEN_SYMBOL : t
TOKEN_LITERAL : .
TOKEN_SYMBOL : type
TOKEN_NOT : !
TOKEN_EQUALS : =
TOKEN_SYMBOL : TOKEN_EOF
TOKEN_LITERAL : )
TOKEN_LITERAL : {
TOKEN_SYMBOL : print_token
TOKEN_LITERAL : (
TOKEN_SYMBOL : t
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_SYMBOL : t
TOKEN_EQUALS : =
TOKEN_SYMBOL : lexer_next
TOKEN_LITERAL : (
TOKEN_AMPERSAND : &
TOKEN_SYMBOL : l
TOKEN_LITERAL : )
TOKEN_LITERAL : ;
TOKEN_LITERAL : }
TOKEN_LITERAL : }
